{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hoc\\\\Ky 5\\\\SWP391\\\\GITHUB\\\\chat-application-react\\\\src\\\\chat\\\\Chat.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [userSaleStaff, setUserSaleStaff] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const selectedUserIdRef = useRef(null);\n  const usernamePageRef = useRef(null);\n  const chatPageRef = useRef(null);\n  const usernameFormRef = useRef(null);\n  const messageFormRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const imageInputRef = useRef(null);\n  const connectingElementRef = useRef(null);\n  const chatAreaRef = useRef(null);\n  const roleSelectListRef = useRef(null);\n  const roleSelectRef = useRef(null);\n  const fetchUnreadMessages = useCallback(async () => {\n    try {\n      const unreadMessagesResponse = await fetch(`http://localhost:8083/unread-messages/${userId}`);\n      if (unreadMessagesResponse.ok) {\n        const unreadMessagesText = await unreadMessagesResponse.text();\n        if (unreadMessagesText.trim().length > 0) {\n          const unreadMessages = JSON.parse(unreadMessagesText);\n          unreadMessages.forEach(message => {\n            const notifiedUser = document.querySelector(`#${message.senderId}`);\n            if (notifiedUser) {\n              const nbrMsg = notifiedUser.querySelector('.nbr-msg');\n              if (nbrMsg) {\n                nbrMsg.classList.remove('hidden');\n                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n              }\n            }\n          });\n        } else {\n          console.log('No unread messages found.');\n        }\n      } else if (unreadMessagesResponse.status === 204) {\n        console.log('No content found for unread messages.');\n      } else {\n        console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching unread messages:', error);\n    }\n  }, [userId]);\n  const renderConnectedUsers = useCallback(users => {\n    const connectedUsersList = document.getElementById('connectedUsers');\n    connectedUsersList.innerHTML = '';\n    if (users.length === 0) {\n      const noUsersMessage = document.createElement('p');\n      noUsersMessage.textContent = 'No users connected';\n      connectedUsersList.appendChild(noUsersMessage);\n    } else {\n      users.forEach(user => {\n        const listItem = createUserElement(user);\n        connectedUsersList.appendChild(listItem);\n      });\n    }\n  }, []);\n  const createUserElement = useCallback(user => {\n    const listItem = document.createElement('li');\n    listItem.classList.add('user-item');\n    listItem.id = user.id;\n    const userImage = document.createElement('img');\n    userImage.src = '../img/user_icon.png';\n    userImage.alt = user.id;\n    const usernameSpan = document.createElement('span');\n    usernameSpan.textContent = user.name;\n    const receivedMsgs = document.createElement('span');\n    receivedMsgs.textContent = '0';\n    receivedMsgs.classList.add('nbr-msg', 'hidden');\n    listItem.appendChild(userImage);\n    listItem.appendChild(usernameSpan);\n    listItem.appendChild(receivedMsgs);\n    listItem.addEventListener('click', userItemClick);\n    return listItem;\n  }, []);\n  const findAndDisplayConnectedUsers = useCallback(async () => {\n    if (currentUser) {\n      try {\n        if (currentUser.role === \"CUSTOMER\") {\n          roleSelectListRef.current.classList.add('hidden');\n          if (userSaleStaff !== \"\") {\n            const allUsersResponse = await fetch(`http://localhost:8083/user/check/${userSaleStaff}`);\n            const user = await allUsersResponse.json();\n            await renderConnectedUsers([user]);\n          }\n        } else {\n          roleSelectListRef.current.classList.remove('hidden');\n          const allUsersResponse = await fetch(`http://localhost:8083/users/${roleSelectRef.current.value}`);\n          const users = await allUsersResponse.json();\n          await renderConnectedUsers(users.filter(user => user.id !== userId));\n        }\n      } catch (error) {\n        console.error('Error fetching and displaying connected users:', error);\n      }\n    }\n  }, [currentUser, userId, userSaleStaff, renderConnectedUsers]);\n  const onRoleChange = useCallback(() => {\n    findAndDisplayConnectedUsers().then();\n  }, [findAndDisplayConnectedUsers]);\n  const connect = useCallback(async event => {\n    event.preventDefault();\n    const enteredUserId = usernameFormRef.current.querySelector('#id').value.trim();\n    if (enteredUserId) {\n      try {\n        const saleStaffResponse = await fetch(`http://localhost:8083/${enteredUserId}/sale-staff`);\n        if (saleStaffResponse.ok) {\n          setUserSaleStaff(await saleStaffResponse.text());\n        } else {\n          console.error('Failed to fetch sale staff:', saleStaffResponse.statusText);\n          alert('Failed to fetch sale staff. Please try again later.');\n          return;\n        }\n        const response = await fetch(`http://localhost:8083/user/check/${enteredUserId}`);\n        if (response.ok) {\n          const user = await response.json();\n          setCurrentUser(user);\n          setUserId(user.id); // Set userId after fetching user\n          onUserFound(user);\n        } else if (response.status === 404) {\n          alert('User not found. Please enter a valid ID.');\n        } else {\n          console.error('Error checking user:', response.statusText);\n          alert('Error checking user. Please try again later.');\n        }\n      } catch (error) {\n        console.error('Error checking user:', error);\n        alert('An unexpected error occurred. Please try again later.');\n      }\n    } else {\n      alert('Please enter a user ID.');\n    }\n  }, [onUserFound]);\n  const onUserFound = useCallback(user => {\n    usernamePageRef.current.classList.add('hidden');\n    chatPageRef.current.classList.remove('hidden');\n    const socket = new SockJS('http://localhost:8083/ws', null, {\n      withCredentials: true\n    });\n    const client = new Client({\n      webSocketFactory: () => socket,\n      onConnect: onConnected,\n      onStompError: onError\n    });\n    setStompClient(client);\n    client.activate();\n  }, []);\n  const onConnected = useCallback(async () => {\n    console.log('Connected to WebSocket');\n    if (stompClient) {\n      stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\n      stompClient.subscribe(`/topic/public`, onMessageReceived);\n      document.querySelector('#connected-user-fullname').textContent = currentUser.name;\n      await findAndDisplayConnectedUsers();\n      await fetchUnreadMessages();\n    } else {\n      console.error('stompClient is null in onConnected. WebSocket connection may not be properly established.');\n    }\n  }, [currentUser, findAndDisplayConnectedUsers, fetchUnreadMessages, userId, stompClient]);\n  const markMessagesAsRead = useCallback(async recipientId => {\n    try {\n      const response = await fetch(`http://localhost:8083/mark-messages-as-read/${recipientId}`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        console.log(`Messages for ${recipientId} marked as read.`);\n      } else {\n        console.error(`Failed to mark messages as read for ${recipientId}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error(`Error marking messages as read for ${recipientId}:`, error);\n    }\n  }, []);\n  const userItemClick = useCallback(async event => {\n    document.querySelectorAll('.user-item').forEach(item => {\n      item.classList.remove('active');\n    });\n    messageFormRef.current.classList.remove('hidden');\n    const clickedUser = event.currentTarget;\n    clickedUser.classList.add('active');\n    setSelectedUserId(clickedUser.getAttribute('id'));\n    await markMessagesAsRead(userId);\n    const nbrMsg = clickedUser.querySelector('.nbr-msg');\n    nbrMsg.classList.add('hidden');\n    nbrMsg.textContent = '0';\n  }, [markMessagesAsRead, userId]);\n  const displayMessage = useCallback((senderId, content) => {\n    const messageContainer = document.createElement('div');\n    messageContainer.classList.add('message');\n    if (senderId === userId) {\n      messageContainer.classList.add('sender');\n    } else {\n      messageContainer.classList.add('receiver');\n    }\n    let messageElement;\n    if (content.startsWith('https://')) {\n      messageElement = document.createElement('img');\n      messageElement.src = content;\n      messageElement.alt = 'Uploaded image';\n    } else {\n      messageElement = document.createElement('p');\n      messageElement.textContent = content;\n    }\n    messageContainer.appendChild(messageElement);\n    chatAreaRef.current.appendChild(messageContainer);\n    chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n  }, [userId]);\n  const onMessageReceived = useCallback(payload => {\n    const message = JSON.parse(payload.body);\n    const senderId = message.senderId;\n    const content = message.content;\n    const activeUserId = selectedUserIdRef.current;\n    if (senderId === activeUserId) {\n      displayMessage(senderId, content);\n    } else {\n      const senderElement = document.getElementById(senderId);\n      const nbrMsg = senderElement.querySelector('.nbr-msg');\n      nbrMsg.classList.remove('hidden');\n      nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n    }\n  }, [displayMessage]);\n  const sendMessage = useCallback(event => {\n    event.preventDefault();\n    const messageContent = messageInputRef.current.value.trim();\n    if (messageContent && stompClient) {\n      const chatMessage = {\n        senderId: userId,\n        recipientId: selectedUserId,\n        content: messageContent,\n        timestamp: new Date()\n      };\n      stompClient.send(`/app/chat/${selectedUserId}`, {}, JSON.stringify(chatMessage));\n      messageInputRef.current.value = '';\n      displayMessage(userId, messageContent);\n    }\n  }, [selectedUserId, stompClient, displayMessage, userId]);\n  const sendImage = useCallback(event => {\n    event.preventDefault();\n    const file = imageInputRef.current.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        const base64String = reader.result;\n        const chatMessage = {\n          senderId: userId,\n          recipientId: selectedUserId,\n          content: base64String,\n          timestamp: new Date()\n        };\n        if (stompClient) {\n          stompClient.send(`/app/chat/${selectedUserId}`, {}, JSON.stringify(chatMessage));\n          displayMessage(userId, base64String);\n        }\n      };\n      reader.readAsDataURL(file);\n    }\n  }, [selectedUserId, stompClient, displayMessage, userId]);\n  const onError = useCallback(error => {\n    console.error('WebSocket error:', error);\n    const connectingElement = connectingElementRef.current;\n    if (connectingElement) {\n      connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\n      connectingElement.style.color = 'red';\n    }\n  }, []);\n  useEffect(() => {\n    if (stompClient) {\n      if (selectedUserId) {\n        selectedUserIdRef.current = selectedUserId;\n      }\n    }\n    return () => {\n      if (stompClient) {\n        stompClient.deactivate();\n      }\n    };\n  }, [selectedUserId, stompClient]);\n  useEffect(() => {\n    if (currentUser && stompClient) {\n      findAndDisplayConnectedUsers();\n      fetchUnreadMessages();\n    }\n  }, [currentUser, findAndDisplayConnectedUsers, fetchUnreadMessages, stompClient]);\n  useEffect(() => {\n    if (roleSelectRef.current) {\n      roleSelectRef.current.addEventListener('change', onRoleChange);\n    }\n    return () => {\n      if (roleSelectRef.current) {\n        roleSelectRef.current.removeEventListener('change', onRoleChange);\n      }\n    };\n  }, [onRoleChange]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: usernamePageRef,\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        ref: usernameFormRef,\n        onSubmit: connect,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"id\",\n          placeholder: \"Enter your user ID\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Connect\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: chatPageRef,\n      className: \"hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"connected-user-fullname\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: roleSelectListRef,\n        children: /*#__PURE__*/_jsxDEV(\"select\", {\n          ref: roleSelectRef,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"CUSTOMER\",\n            children: \"Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 353,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"SALE_STAFF\",\n            children: \"Sale Staff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        id: \"connectedUsers\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 357,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        ref: messageFormRef,\n        className: \"hidden\",\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          ref: messageInputRef,\n          placeholder: \"Enter your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          ref: imageInputRef,\n          onChange: sendImage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: chatAreaRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: connectingElementRef,\n        children: \"Connecting...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 342,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"GPSy6cqghtsObwmXfrTax8z1maI=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","SockJS","Client","jsxDEV","_jsxDEV","ChatComponent","_s","stompClient","setStompClient","currentUser","setCurrentUser","userId","setUserId","userSaleStaff","setUserSaleStaff","selectedUserId","setSelectedUserId","selectedUserIdRef","usernamePageRef","chatPageRef","usernameFormRef","messageFormRef","messageInputRef","imageInputRef","connectingElementRef","chatAreaRef","roleSelectListRef","roleSelectRef","fetchUnreadMessages","unreadMessagesResponse","fetch","ok","unreadMessagesText","text","trim","length","unreadMessages","JSON","parse","forEach","message","notifiedUser","document","querySelector","senderId","nbrMsg","classList","remove","textContent","parseInt","console","log","status","error","statusText","renderConnectedUsers","users","connectedUsersList","getElementById","innerHTML","noUsersMessage","createElement","appendChild","user","listItem","createUserElement","add","id","userImage","src","alt","usernameSpan","name","receivedMsgs","addEventListener","userItemClick","findAndDisplayConnectedUsers","role","current","allUsersResponse","json","value","filter","onRoleChange","then","connect","event","preventDefault","enteredUserId","saleStaffResponse","alert","response","onUserFound","socket","withCredentials","client","webSocketFactory","onConnect","onConnected","onStompError","onError","activate","subscribe","onMessageReceived","markMessagesAsRead","recipientId","method","querySelectorAll","item","clickedUser","currentTarget","getAttribute","displayMessage","content","messageContainer","messageElement","startsWith","scrollTop","scrollHeight","payload","body","activeUserId","senderElement","sendMessage","messageContent","chatMessage","timestamp","Date","send","stringify","sendImage","file","files","reader","FileReader","onloadend","base64String","result","readAsDataURL","connectingElement","style","color","deactivate","removeEventListener","children","ref","onSubmit","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","className","onChange","_c","$RefreshReg$"],"sources":["E:/Hoc/Ky 5/SWP391/GITHUB/chat-application-react/src/chat/Chat.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst ChatComponent = () => {\r\n    const [stompClient, setStompClient] = useState(null);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    const [userSaleStaff, setUserSaleStaff] = useState(null);\r\n    const [selectedUserId, setSelectedUserId] = useState(null);\r\n\r\n    const selectedUserIdRef = useRef(null);\r\n\r\n    const usernamePageRef = useRef(null);\r\n    const chatPageRef = useRef(null);\r\n    const usernameFormRef = useRef(null);\r\n    const messageFormRef = useRef(null);\r\n    const messageInputRef = useRef(null);\r\n    const imageInputRef = useRef(null);\r\n    const connectingElementRef = useRef(null);\r\n    const chatAreaRef = useRef(null);\r\n    const roleSelectListRef = useRef(null);\r\n    const roleSelectRef = useRef(null);\r\n\r\n    const fetchUnreadMessages = useCallback(async () => {\r\n        try {\r\n            const unreadMessagesResponse = await fetch(`http://localhost:8083/unread-messages/${userId}`);\r\n            if (unreadMessagesResponse.ok) {\r\n                const unreadMessagesText = await unreadMessagesResponse.text();\r\n                if (unreadMessagesText.trim().length > 0) {\r\n                    const unreadMessages = JSON.parse(unreadMessagesText);\r\n                    unreadMessages.forEach(message => {\r\n                        const notifiedUser = document.querySelector(`#${message.senderId}`);\r\n                        if (notifiedUser) {\r\n                            const nbrMsg = notifiedUser.querySelector('.nbr-msg');\r\n                            if (nbrMsg) {\r\n                                nbrMsg.classList.remove('hidden');\r\n                                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log('No unread messages found.');\r\n                }\r\n            } else if (unreadMessagesResponse.status === 204) {\r\n                console.log('No content found for unread messages.');\r\n            } else {\r\n                console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching unread messages:', error);\r\n        }\r\n    }, [userId]);\r\n\r\n    const renderConnectedUsers = useCallback((users) => {\r\n        const connectedUsersList = document.getElementById('connectedUsers');\r\n        connectedUsersList.innerHTML = '';\r\n\r\n        if (users.length === 0) {\r\n            const noUsersMessage = document.createElement('p');\r\n            noUsersMessage.textContent = 'No users connected';\r\n            connectedUsersList.appendChild(noUsersMessage);\r\n        } else {\r\n            users.forEach(user => {\r\n                const listItem = createUserElement(user);\r\n                connectedUsersList.appendChild(listItem);\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const createUserElement = useCallback((user) => {\r\n        const listItem = document.createElement('li');\r\n        listItem.classList.add('user-item');\r\n        listItem.id = user.id;\r\n\r\n        const userImage = document.createElement('img');\r\n        userImage.src = '../img/user_icon.png';\r\n        userImage.alt = user.id;\r\n\r\n        const usernameSpan = document.createElement('span');\r\n        usernameSpan.textContent = user.name;\r\n\r\n        const receivedMsgs = document.createElement('span');\r\n        receivedMsgs.textContent = '0';\r\n        receivedMsgs.classList.add('nbr-msg', 'hidden');\r\n\r\n        listItem.appendChild(userImage);\r\n        listItem.appendChild(usernameSpan);\r\n        listItem.appendChild(receivedMsgs);\r\n\r\n        listItem.addEventListener('click', userItemClick);\r\n\r\n        return listItem;\r\n    }, []);\r\n\r\n    const findAndDisplayConnectedUsers = useCallback(async () => {\r\n        if (currentUser) {\r\n            try {\r\n                if (currentUser.role === \"CUSTOMER\") {\r\n                    roleSelectListRef.current.classList.add('hidden');\r\n                    if (userSaleStaff !== \"\") {\r\n                        const allUsersResponse = await fetch(`http://localhost:8083/user/check/${userSaleStaff}`);\r\n                        const user = await allUsersResponse.json();\r\n                        await renderConnectedUsers([user]);\r\n                    }\r\n                } else {\r\n                    roleSelectListRef.current.classList.remove('hidden');\r\n                    const allUsersResponse = await fetch(`http://localhost:8083/users/${roleSelectRef.current.value}`);\r\n                    const users = await allUsersResponse.json();\r\n                    await renderConnectedUsers(users.filter(user => user.id !== userId));\r\n                }\r\n            } catch (error) {\r\n                console.error('Error fetching and displaying connected users:', error);\r\n            }\r\n        }\r\n    }, [currentUser, userId, userSaleStaff, renderConnectedUsers]);\r\n\r\n    const onRoleChange = useCallback(() => {\r\n        findAndDisplayConnectedUsers().then();\r\n    }, [findAndDisplayConnectedUsers]);\r\n\r\n    const connect = useCallback(async (event) => {\r\n        event.preventDefault();\r\n        const enteredUserId = usernameFormRef.current.querySelector('#id').value.trim();\r\n        if (enteredUserId) {\r\n            try {\r\n                const saleStaffResponse = await fetch(`http://localhost:8083/${enteredUserId}/sale-staff`);\r\n                if (saleStaffResponse.ok) {\r\n                    setUserSaleStaff(await saleStaffResponse.text());\r\n                } else {\r\n                    console.error('Failed to fetch sale staff:', saleStaffResponse.statusText);\r\n                    alert('Failed to fetch sale staff. Please try again later.');\r\n                    return;\r\n                }\r\n\r\n                const response = await fetch(`http://localhost:8083/user/check/${enteredUserId}`);\r\n                if (response.ok) {\r\n                    const user = await response.json();\r\n                    setCurrentUser(user);\r\n                    setUserId(user.id); // Set userId after fetching user\r\n                    onUserFound(user);\r\n                } else if (response.status === 404) {\r\n                    alert('User not found. Please enter a valid ID.');\r\n                } else {\r\n                    console.error('Error checking user:', response.statusText);\r\n                    alert('Error checking user. Please try again later.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking user:', error);\r\n                alert('An unexpected error occurred. Please try again later.');\r\n            }\r\n        } else {\r\n            alert('Please enter a user ID.');\r\n        }\r\n    }, [onUserFound]);\r\n\r\n    const onUserFound = useCallback((user) => {\r\n        usernamePageRef.current.classList.add('hidden');\r\n        chatPageRef.current.classList.remove('hidden');\r\n\r\n        const socket = new SockJS('http://localhost:8083/ws', null, { withCredentials: true });\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            onConnect: onConnected,\r\n            onStompError: onError,\r\n        });\r\n        setStompClient(client);\r\n        client.activate();\r\n    }, []);\r\n\r\n    const onConnected = useCallback(async () => {\r\n        console.log('Connected to WebSocket');\r\n\r\n        if (stompClient) {\r\n            stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\r\n            stompClient.subscribe(`/topic/public`, onMessageReceived);\r\n\r\n            document.querySelector('#connected-user-fullname').textContent = currentUser.name;\r\n            await findAndDisplayConnectedUsers();\r\n            await fetchUnreadMessages();\r\n        } else {\r\n            console.error('stompClient is null in onConnected. WebSocket connection may not be properly established.');\r\n        }\r\n    }, [currentUser, findAndDisplayConnectedUsers, fetchUnreadMessages, userId, stompClient]);\r\n\r\n    const markMessagesAsRead = useCallback(async (recipientId) => {\r\n        try {\r\n            const response = await fetch(`http://localhost:8083/mark-messages-as-read/${recipientId}`, {\r\n                method: 'POST'\r\n            });\r\n            if (response.ok) {\r\n                console.log(`Messages for ${recipientId} marked as read.`);\r\n            } else {\r\n                console.error(`Failed to mark messages as read for ${recipientId}: ${response.statusText}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error marking messages as read for ${recipientId}:`, error);\r\n        }\r\n    }, []);\r\n\r\n    const userItemClick = useCallback(async (event) => {\r\n        document.querySelectorAll('.user-item').forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        messageFormRef.current.classList.remove('hidden');\r\n\r\n        const clickedUser = event.currentTarget;\r\n        clickedUser.classList.add('active');\r\n\r\n        setSelectedUserId(clickedUser.getAttribute('id'));\r\n\r\n        await markMessagesAsRead(userId);\r\n\r\n        const nbrMsg = clickedUser.querySelector('.nbr-msg');\r\n        nbrMsg.classList.add('hidden');\r\n        nbrMsg.textContent = '0';\r\n    }, [markMessagesAsRead, userId]);\r\n\r\n    const displayMessage = useCallback((senderId, content) => {\r\n        const messageContainer = document.createElement('div');\r\n        messageContainer.classList.add('message');\r\n        if (senderId === userId) {\r\n            messageContainer.classList.add('sender');\r\n        } else {\r\n            messageContainer.classList.add('receiver');\r\n        }\r\n\r\n        let messageElement;\r\n        if (content.startsWith('https://')) {\r\n            messageElement = document.createElement('img');\r\n            messageElement.src = content;\r\n            messageElement.alt = 'Uploaded image';\r\n        } else {\r\n            messageElement = document.createElement('p');\r\n            messageElement.textContent = content;\r\n        }\r\n\r\n        messageContainer.appendChild(messageElement);\r\n        chatAreaRef.current.appendChild(messageContainer);\r\n        chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n    }, [userId]);\r\n\r\n    const onMessageReceived = useCallback((payload) => {\r\n        const message = JSON.parse(payload.body);\r\n        const senderId = message.senderId;\r\n        const content = message.content;\r\n        const activeUserId = selectedUserIdRef.current;\r\n\r\n        if (senderId === activeUserId) {\r\n            displayMessage(senderId, content);\r\n        } else {\r\n            const senderElement = document.getElementById(senderId);\r\n            const nbrMsg = senderElement.querySelector('.nbr-msg');\r\n            nbrMsg.classList.remove('hidden');\r\n            nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n        }\r\n    }, [displayMessage]);\r\n\r\n    const sendMessage = useCallback((event) => {\r\n        event.preventDefault();\r\n        const messageContent = messageInputRef.current.value.trim();\r\n        if (messageContent && stompClient) {\r\n            const chatMessage = {\r\n                senderId: userId,\r\n                recipientId: selectedUserId,\r\n                content: messageContent,\r\n                timestamp: new Date(),\r\n            };\r\n\r\n            stompClient.send(`/app/chat/${selectedUserId}`, {}, JSON.stringify(chatMessage));\r\n            messageInputRef.current.value = '';\r\n            displayMessage(userId, messageContent);\r\n        }\r\n    }, [selectedUserId, stompClient, displayMessage, userId]);\r\n\r\n    const sendImage = useCallback((event) => {\r\n        event.preventDefault();\r\n        const file = imageInputRef.current.files[0];\r\n        if (file) {\r\n            const reader = new FileReader();\r\n            reader.onloadend = () => {\r\n                const base64String = reader.result;\r\n                const chatMessage = {\r\n                    senderId: userId,\r\n                    recipientId: selectedUserId,\r\n                    content: base64String,\r\n                    timestamp: new Date(),\r\n                };\r\n\r\n                if (stompClient) {\r\n                    stompClient.send(`/app/chat/${selectedUserId}`, {}, JSON.stringify(chatMessage));\r\n                    displayMessage(userId, base64String);\r\n                }\r\n            };\r\n            reader.readAsDataURL(file);\r\n        }\r\n    }, [selectedUserId, stompClient, displayMessage, userId]);\r\n\r\n    const onError = useCallback((error) => {\r\n        console.error('WebSocket error:', error);\r\n        const connectingElement = connectingElementRef.current;\r\n        if (connectingElement) {\r\n            connectingElement.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\r\n            connectingElement.style.color = 'red';\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            if (selectedUserId) {\r\n                selectedUserIdRef.current = selectedUserId;\r\n            }\r\n        }\r\n\r\n        return () => {\r\n            if (stompClient) {\r\n                stompClient.deactivate();\r\n            }\r\n        };\r\n    }, [selectedUserId, stompClient]);\r\n\r\n    useEffect(() => {\r\n        if (currentUser && stompClient) {\r\n            findAndDisplayConnectedUsers();\r\n            fetchUnreadMessages();\r\n        }\r\n    }, [currentUser, findAndDisplayConnectedUsers, fetchUnreadMessages, stompClient]);\r\n\r\n    useEffect(() => {\r\n        if (roleSelectRef.current) {\r\n            roleSelectRef.current.addEventListener('change', onRoleChange);\r\n        }\r\n\r\n        return () => {\r\n            if (roleSelectRef.current) {\r\n                roleSelectRef.current.removeEventListener('change', onRoleChange);\r\n            }\r\n        };\r\n    }, [onRoleChange]);\r\n\r\n    return (\r\n        <div>\r\n            <div ref={usernamePageRef}>\r\n                <form ref={usernameFormRef} onSubmit={connect}>\r\n                    <input type=\"text\" id=\"id\" placeholder=\"Enter your user ID\" />\r\n                    <button type=\"submit\">Connect</button>\r\n                </form>\r\n            </div>\r\n            <div ref={chatPageRef} className=\"hidden\">\r\n                <div id=\"connected-user-fullname\"></div>\r\n                <div ref={roleSelectListRef}>\r\n                    <select ref={roleSelectRef}>\r\n                        <option value=\"CUSTOMER\">Customer</option>\r\n                        <option value=\"SALE_STAFF\">Sale Staff</option>\r\n                    </select>\r\n                </div>\r\n                <ul id=\"connectedUsers\"></ul>\r\n                <form ref={messageFormRef} className=\"hidden\" onSubmit={sendMessage}>\r\n                    <input type=\"text\" ref={messageInputRef} placeholder=\"Enter your message\" />\r\n                    <button type=\"submit\">Send</button>\r\n                    <input type=\"file\" ref={imageInputRef} onChange={sendImage} />\r\n                </form>\r\n                <div ref={chatAreaRef}></div>\r\n                <div ref={connectingElementRef}>Connecting...</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}