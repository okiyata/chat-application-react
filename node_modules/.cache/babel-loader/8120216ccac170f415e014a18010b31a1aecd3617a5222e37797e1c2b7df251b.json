{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hoc\\\\Ky 5\\\\SWP391\\\\GITHUB\\\\chat-application-react\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport SockJS from 'sockjs-client';\nimport { Client } from '@stomp/stompjs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatComponent = () => {\n  _s();\n  const [stompClient, setStompClient] = useState(null);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [userId, setUserId] = useState(null);\n  const [userSaleStaff, setUserSaleStaff] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState(null);\n  const selectedUserIdRef = useRef(null);\n  const usernamePageRef = useRef(null);\n  const chatPageRef = useRef(null);\n  const usernameFormRef = useRef(null);\n  const messageFormRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const imageInputRef = useRef(null);\n  const connectingElementRef = useRef(null);\n  const chatAreaRef = useRef(null);\n  const logoutRef = useRef(null);\n  const roleSelectListRef = useRef(null);\n  const roleSelectRef = useRef(null);\n  useEffect(() => {\n    // componentDidMount equivalent\n\n    window.onbeforeunload = () => onLogout();\n    return () => {\n      // componentWillUnmount equivalent\n      if (stompClient) {\n        stompClient.publish({\n          destination: \"/app/user.disconnectUser\",\n          body: JSON.stringify({\n            id: userId\n          })\n        });\n        stompClient.deactivate();\n      }\n    };\n  }, [stompClient, userId]);\n  useEffect(() => {\n    if (stompClient) {\n      stompClient.onConnect = onConnected;\n      stompClient.onStompError = onError;\n      stompClient.activate();\n    }\n  }, [stompClient]);\n  useEffect(() => {\n    selectedUserIdRef.current = selectedUserId;\n    if (selectedUserId !== null) {\n      fetchAndDisplayUserChat().then();\n    }\n  }, [selectedUserId]);\n  useEffect(() => {\n    const handleRoleChange = () => {\n      findAndDisplayConnectedUsers(roleSelectRef.current.value);\n    };\n    imageInputRef.current.addEventListener('change', handleImageUpload);\n    roleSelectListRef.current.addEventListener('change', handleRoleChange);\n    return () => {\n      imageInputRef.current.removeEventListener('change', handleImageUpload);\n      roleSelectListRef.current.removeEventListener('change', handleRoleChange);\n    };\n  }, [userId, selectedUserId]);\n  async function connect(event) {\n    event.preventDefault();\n    const enteredUserId = usernameFormRef.current.querySelector('#id').value.trim();\n    if (enteredUserId) {\n      try {\n        const saleStaffResponse = await fetch(`http://localhost:8083/${enteredUserId}/sale-staff`);\n        if (saleStaffResponse.ok) {\n          setUserSaleStaff(await saleStaffResponse.text());\n        } else {\n          console.error('Failed to fetch sale staff:', saleStaffResponse.statusText);\n          alert('Failed to fetch sale staff. Please try again later.');\n          return;\n        }\n        const response = await fetch(`http://localhost:8083/user/check/${enteredUserId}`);\n        if (response.ok) {\n          const user = await response.json();\n          setCurrentUser(user);\n          setUserId(user.id); // Set userId after fetching user\n          onUserFound(user);\n        } else if (response.status === 404) {\n          alert('User not found. Please enter a valid ID.');\n        } else {\n          console.error('Error checking user:', response.statusText);\n          alert('Error checking user. Please try again later.');\n        }\n      } catch (error) {\n        console.error('Error checking user:', error);\n        alert('An unexpected error occurred. Please try again later.');\n      }\n    } else {\n      alert('Please enter a user ID.');\n    }\n  }\n  function onUserFound(user) {\n    usernamePageRef.current.classList.add('hidden');\n    chatPageRef.current.classList.remove('hidden');\n    const socket = new SockJS('http://localhost:8083/ws', null, {\n      withCredentials: true\n    });\n    const client = new Client({\n      webSocketFactory: () => socket,\n      onConnect: onConnected,\n      onStompError: onError\n    });\n    setStompClient(client);\n    client.activate();\n  }\n  async function onConnected() {\n    console.log('Connected to WebSocket');\n    console.log('stompClient value:', stompClient);\n    if (stompClient) {\n      // Subscribe to necessary channels\n      stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\n      stompClient.subscribe(`/topic/public`, onMessageReceived);\n\n      // Perform operations that depend on stompClient being ready\n      document.querySelector('#connected-user-fullname').textContent = currentUser.name;\n      await findAndDisplayConnectedUsers();\n      await fetchUnreadMessages();\n    } else {\n      console.error('stompClient is null in onConnected. WebSocket connection may not be properly established.');\n    }\n  }\n  async function fetchUnreadMessages() {\n    try {\n      const unreadMessagesResponse = await fetch(`http://localhost:8083/unread-messages/${userId}`);\n      if (unreadMessagesResponse.ok) {\n        const unreadMessagesText = await unreadMessagesResponse.text();\n        if (unreadMessagesText.trim().length > 0) {\n          const unreadMessages = JSON.parse(unreadMessagesText);\n          unreadMessages.forEach(message => {\n            const notifiedUser = document.querySelector(`#${message.senderId}`);\n            if (notifiedUser) {\n              const nbrMsg = notifiedUser.querySelector('.nbr-msg');\n              if (nbrMsg) {\n                nbrMsg.classList.remove('hidden');\n                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n              }\n            }\n          });\n        } else {\n          console.log('No unread messages found.');\n        }\n      } else if (unreadMessagesResponse.status === 204) {\n        console.log('No content found for unread messages.');\n      } else {\n        console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching unread messages:', error);\n    }\n  }\n  async function findAndDisplayConnectedUsers() {\n    try {\n      if (currentUser.role === \"CUSTOMER\") {\n        roleSelectListRef.current.classList.add('hidden');\n        if (userSaleStaff !== \"\") {\n          const allUsersResponse = await fetch(`http://localhost:8083/user/check/${userSaleStaff}`);\n          const user = await allUsersResponse.json();\n          await renderConnectedUsers([user]);\n        }\n      } else {\n        roleSelectListRef.current.classList.remove('hidden');\n        const allUsersResponse = await fetch(`http://localhost:8083/users/${roleSelectRef.current.value}`);\n        const users = await allUsersResponse.json();\n        await renderConnectedUsers(users.filter(user => user.id !== userId));\n      }\n    } catch (error) {\n      console.error('Error fetching and displaying connected users:', error);\n    }\n  }\n  function renderConnectedUsers(users) {\n    const connectedUsersList = document.getElementById('connectedUsers');\n    connectedUsersList.innerHTML = '';\n    if (users.length === 0) {\n      const noUsersMessage = document.createElement('p');\n      noUsersMessage.textContent = 'No users connected';\n      connectedUsersList.appendChild(noUsersMessage);\n    } else {\n      users.forEach(user => {\n        const listItem = createUserElement(user);\n        connectedUsersList.appendChild(listItem);\n      });\n    }\n  }\n  function createUserElement(user) {\n    const listItem = document.createElement('li');\n    listItem.classList.add('user-item');\n    listItem.id = user.id;\n    const userImage = document.createElement('img');\n    userImage.src = '/img/user_icon.png';\n    userImage.alt = user.id;\n    const usernameSpan = document.createElement('span');\n    usernameSpan.textContent = user.name;\n    const receivedMsgs = document.createElement('span');\n    receivedMsgs.textContent = '0';\n    receivedMsgs.classList.add('nbr-msg', 'hidden');\n    listItem.appendChild(userImage);\n    listItem.appendChild(usernameSpan);\n    listItem.appendChild(receivedMsgs);\n    listItem.addEventListener('click', userItemClick);\n    return listItem;\n  }\n  function onRoleChange() {\n    findAndDisplayConnectedUsers(roleSelectRef.current.value).then();\n  }\n  async function markMessagesAsRead(recipientId) {\n    try {\n      const response = await fetch(`http://localhost:8083/mark-messages-as-read/${recipientId}`, {\n        method: 'POST'\n      });\n      if (response.ok) {\n        console.log(`Messages for ${recipientId} marked as read.`);\n      } else {\n        console.error(`Failed to mark messages as read for ${recipientId}: ${response.statusText}`);\n      }\n    } catch (error) {\n      console.error(`Error marking messages as read for ${recipientId}:`, error);\n    }\n  }\n  async function userItemClick(event) {\n    document.querySelectorAll('.user-item').forEach(item => {\n      item.classList.remove('active');\n    });\n    messageFormRef.current.classList.remove('hidden');\n    const clickedUser = event.currentTarget;\n    clickedUser.classList.add('active');\n    setSelectedUserId(clickedUser.getAttribute('id'));\n    await markMessagesAsRead(userId);\n    const nbrMsg = clickedUser.querySelector('.nbr-msg');\n    nbrMsg.classList.add('hidden');\n    nbrMsg.textContent = '0';\n  }\n  function displayMessage(senderId, content) {\n    const messageContainer = document.createElement('div');\n    messageContainer.classList.add('message');\n    if (senderId === userId) {\n      messageContainer.classList.add('sender');\n    } else {\n      messageContainer.classList.add('receiver');\n    }\n    let messageElement;\n    if (content.startsWith('https://')) {\n      messageElement = document.createElement('img');\n      messageElement.src = content;\n      messageElement.alt = 'Uploaded image';\n      messageElement.classList.add('uploaded-image');\n    } else {\n      messageElement = document.createElement('p');\n      messageElement.textContent = content;\n    }\n    messageContainer.appendChild(messageElement);\n    chatAreaRef.current.appendChild(messageContainer);\n    chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n  }\n  async function fetchAndDisplayUserChat() {\n    const userChatResponse = await fetch(`http://localhost:8083/messages/${userId}/${selectedUserId}`);\n    if (userChatResponse.status === 200) {\n      const userChat = await userChatResponse.json();\n      chatAreaRef.current.innerHTML = '';\n      userChat.forEach(chat => {\n        displayMessage(chat.senderId, chat.content);\n      });\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    } else {\n      chatAreaRef.current.innerHTML = '';\n      console.log('No chat messages found.');\n    }\n  }\n  function onError(error) {\n    connectingElementRef.current.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\n    connectingElementRef.current.style.color = 'red';\n    console.error('WebSocket connection error:', error);\n  }\n  function sendMessage(event) {\n    event.preventDefault();\n    const messageContent = messageInputRef.current.value.trim();\n    if (messageContent && stompClient) {\n      const chatMessage = {\n        senderId: userId,\n        recipientId: selectedUserIdRef.current,\n        content: messageContent,\n        timestamp: new Date()\n      };\n      stompClient.publish({\n        destination: \"/app/chat\",\n        body: JSON.stringify(chatMessage)\n      });\n      console.log('Message sent:', chatMessage);\n      displayMessage(userId, messageContent);\n      messageInputRef.current.value = '';\n    }\n    chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n  }\n  async function onMessageReceived(payload) {\n    console.log('PAYLOAD', payload);\n    const message = JSON.parse(payload.body);\n    console.log(\"selectedUserId: \", selectedUserId);\n    if (selectedUserIdRef.current && selectedUserIdRef.current === message.senderId) {\n      displayMessage(message.senderId, message.content);\n      console.log('Message received and displayed.');\n      chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\n    } else {\n      const notifiedUser = document.querySelector(`#${message.senderId}`);\n      if (notifiedUser && !notifiedUser.classList.contains('active')) {\n        const nbrMsg = notifiedUser.querySelector('.nbr-msg');\n        if (nbrMsg) {\n          nbrMsg.classList.remove('hidden');\n          nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n        }\n        console.log('Message notification sent:', nbrMsg);\n      }\n    }\n\n    // if (selectedUserId) {\n    //     document.querySelector(`#${selectedUserId}`).classList.add('active');\n    //     console.log('Active user item:', selectedUserId);\n    // } else {\n    //     messageFormRef.current.classList.add('hidden');\n    //     console.log('Hidden message form');\n    // }\n  }\n  function onLogout() {\n    if (stompClient) {\n      stompClient.publish({\n        destination: \"http://localhost:8083/app/user.disconnectUser\",\n        body: JSON.stringify({\n          id: userId,\n          status: 'OFFLINE'\n        })\n      });\n      stompClient.deactivate();\n    }\n    window.location.reload();\n  }\n  async function handleImageUpload(event) {\n    const imageFile = event.target.files[0];\n    if (imageFile) {\n      try {\n        const formData = new FormData();\n        formData.append('senderId', userId);\n        formData.append('recipientId', selectedUserIdRef.current);\n        formData.append('message', messageInputRef.current.value);\n        const resizedImageFile = await resizeImage(imageFile);\n        formData.append('file', resizedImageFile);\n        const response = await fetch('http://localhost:8083/chat/upload', {\n          method: 'POST',\n          body: formData\n        });\n        if (!response.ok) {\n          throw new Error('Failed to upload image');\n        }\n        const imageURL = await response.text();\n        displayMessage(userId, imageURL);\n        messageInputRef.current.value = '';\n        imageInputRef.current.value = '';\n      } catch (error) {\n        console.error('Error uploading image:', error);\n        alert('Failed to upload image. Please try again later.');\n      }\n    }\n  }\n  async function resizeImage(imageFile) {\n    const maxSize = 1024;\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(imageFile);\n      reader.onload = function (event) {\n        const img = new Image();\n        img.src = event.target.result;\n        img.onload = function () {\n          let width = img.width;\n          let height = img.height;\n          if (width > height) {\n            if (width > maxSize) {\n              height *= maxSize / width;\n              width = maxSize;\n            }\n          } else {\n            if (height > maxSize) {\n              width *= maxSize / height;\n              height = maxSize;\n            }\n          }\n          const canvas = document.createElement('canvas');\n          canvas.width = width;\n          canvas.height = height;\n          const ctx = canvas.getContext('2d');\n          ctx.drawImage(img, 0, 0, width, height);\n          canvas.toBlob(blob => {\n            resolve(new File([blob], imageFile.name, {\n              type: imageFile.type\n            }));\n          }, imageFile.type);\n        };\n      };\n      reader.onerror = reject;\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-form\",\n      ref: usernamePageRef,\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        ref: usernameFormRef,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"id\",\n          children: \"UserId:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"id\",\n          name: \"id\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Enter Chatroom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container hidden\",\n      ref: chatPageRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"users-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"users-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Online Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"role-select\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"role-select-list hidden\",\n            ref: roleSelectListRef,\n            children: /*#__PURE__*/_jsxDEV(\"select\", {\n              id: \"role-select\",\n              ref: roleSelectRef,\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"CUSTOMER\",\n                children: \"Customer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 469,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"STAFF\",\n                children: \"Staff\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 470,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"MANAGER\",\n                children: \"Manager\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 471,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 467,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"connectedUsers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"connected-user-fullname\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"logout\",\n            href: \"#\",\n            onClick: onLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 478,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-area\",\n          id: \"chat-messages\",\n          ref: chatAreaRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"messageForm\",\n          name: \"messageForm\",\n          className: \"hidden\",\n          ref: messageFormRef,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-input\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              autoComplete: \"off\",\n              type: \"text\",\n              id: \"message\",\n              placeholder: \"Type your message...\",\n              writingsuggestions: \"enabled\",\n              ref: messageInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"imageInput\",\n              accept: \"image/*\",\n              ref: imageInputRef\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 495,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              children: \"Send\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 486,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 452,\n    columnNumber: 9\n  }, this);\n};\n_s(ChatComponent, \"UTUL1ZSUDsFGbeSw1pirA77pWUY=\");\n_c = ChatComponent;\nexport default ChatComponent;\nvar _c;\n$RefreshReg$(_c, \"ChatComponent\");","map":{"version":3,"names":["React","useState","useEffect","useRef","SockJS","Client","jsxDEV","_jsxDEV","ChatComponent","_s","stompClient","setStompClient","currentUser","setCurrentUser","userId","setUserId","userSaleStaff","setUserSaleStaff","selectedUserId","setSelectedUserId","selectedUserIdRef","usernamePageRef","chatPageRef","usernameFormRef","messageFormRef","messageInputRef","imageInputRef","connectingElementRef","chatAreaRef","logoutRef","roleSelectListRef","roleSelectRef","window","onbeforeunload","onLogout","publish","destination","body","JSON","stringify","id","deactivate","onConnect","onConnected","onStompError","onError","activate","current","fetchAndDisplayUserChat","then","handleRoleChange","findAndDisplayConnectedUsers","value","addEventListener","handleImageUpload","removeEventListener","connect","event","preventDefault","enteredUserId","querySelector","trim","saleStaffResponse","fetch","ok","text","console","error","statusText","alert","response","user","json","onUserFound","status","classList","add","remove","socket","withCredentials","client","webSocketFactory","log","subscribe","onMessageReceived","document","textContent","name","fetchUnreadMessages","unreadMessagesResponse","unreadMessagesText","length","unreadMessages","parse","forEach","message","notifiedUser","senderId","nbrMsg","parseInt","role","allUsersResponse","renderConnectedUsers","users","filter","connectedUsersList","getElementById","innerHTML","noUsersMessage","createElement","appendChild","listItem","createUserElement","userImage","src","alt","usernameSpan","receivedMsgs","userItemClick","onRoleChange","markMessagesAsRead","recipientId","method","querySelectorAll","item","clickedUser","currentTarget","getAttribute","displayMessage","content","messageContainer","messageElement","startsWith","scrollTop","scrollHeight","userChatResponse","userChat","chat","style","color","sendMessage","messageContent","chatMessage","timestamp","Date","payload","contains","location","reload","imageFile","target","files","formData","FormData","append","resizedImageFile","resizeImage","Error","imageURL","maxSize","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","img","Image","result","width","height","canvas","ctx","getContext","drawImage","toBlob","blob","File","type","onerror","children","className","ref","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","required","href","onClick","autoComplete","placeholder","writingsuggestions","accept","_c","$RefreshReg$"],"sources":["E:/Hoc/Ky 5/SWP391/GITHUB/chat-application-react/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport { Client } from '@stomp/stompjs';\r\n\r\nconst ChatComponent = () => {\r\n    const [stompClient, setStompClient] = useState(null);\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [userId, setUserId] = useState(null);\r\n    const [userSaleStaff, setUserSaleStaff] = useState(null);\r\n    const [selectedUserId, setSelectedUserId] = useState(null);\r\n\r\n    const selectedUserIdRef = useRef(null);\r\n\r\n    const usernamePageRef = useRef(null);\r\n    const chatPageRef = useRef(null);\r\n    const usernameFormRef = useRef(null);\r\n    const messageFormRef = useRef(null);\r\n    const messageInputRef = useRef(null);\r\n    const imageInputRef = useRef(null);\r\n    const connectingElementRef = useRef(null);\r\n    const chatAreaRef = useRef(null);\r\n    const logoutRef = useRef(null);\r\n    const roleSelectListRef = useRef(null);\r\n    const roleSelectRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        // componentDidMount equivalent\r\n\r\n        window.onbeforeunload = () => onLogout();\r\n\r\n\r\n        return () => {\r\n            // componentWillUnmount equivalent\r\n            if (stompClient) {\r\n                stompClient.publish({\r\n                    destination: \"/app/user.disconnectUser\",\r\n                    body: JSON.stringify({ id: userId }),\r\n                });\r\n                stompClient.deactivate();\r\n            }\r\n        };\r\n    }, [stompClient, userId]);\r\n\r\n    useEffect(() => {\r\n        if (stompClient) {\r\n            stompClient.onConnect = onConnected;\r\n            stompClient.onStompError = onError;\r\n            stompClient.activate();\r\n        }\r\n    }, [stompClient]);\r\n\r\n    useEffect(() => {\r\n        selectedUserIdRef.current = selectedUserId;\r\n        if (selectedUserId !== null) {\r\n            fetchAndDisplayUserChat().then();\r\n        }\r\n    }, [selectedUserId]);\r\n\r\n    useEffect(() => {\r\n        const handleRoleChange = () => {\r\n            findAndDisplayConnectedUsers(roleSelectRef.current.value);\r\n        };\r\n\r\n        imageInputRef.current.addEventListener('change', handleImageUpload);\r\n        roleSelectListRef.current.addEventListener('change', handleRoleChange);\r\n\r\n        return () => {\r\n            imageInputRef.current.removeEventListener('change', handleImageUpload);\r\n            roleSelectListRef.current.removeEventListener('change', handleRoleChange);\r\n        };\r\n    }, [userId, selectedUserId]);\r\n\r\n    async function connect(event) {\r\n        event.preventDefault();\r\n        const enteredUserId = usernameFormRef.current.querySelector('#id').value.trim();\r\n        if (enteredUserId) {\r\n            try {\r\n                const saleStaffResponse = await fetch(`http://localhost:8083/${enteredUserId}/sale-staff`);\r\n                if (saleStaffResponse.ok) {\r\n                    setUserSaleStaff(await saleStaffResponse.text());\r\n                } else {\r\n                    console.error('Failed to fetch sale staff:', saleStaffResponse.statusText);\r\n                    alert('Failed to fetch sale staff. Please try again later.');\r\n                    return;\r\n                }\r\n\r\n                const response = await fetch(`http://localhost:8083/user/check/${enteredUserId}`);\r\n                if (response.ok) {\r\n                    const user = await response.json();\r\n                    setCurrentUser(user);\r\n                    setUserId(user.id); // Set userId after fetching user\r\n                    onUserFound(user);\r\n                } else if (response.status === 404) {\r\n                    alert('User not found. Please enter a valid ID.');\r\n                } else {\r\n                    console.error('Error checking user:', response.statusText);\r\n                    alert('Error checking user. Please try again later.');\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking user:', error);\r\n                alert('An unexpected error occurred. Please try again later.');\r\n            }\r\n        } else {\r\n            alert('Please enter a user ID.');\r\n        }\r\n    }\r\n\r\n    function onUserFound(user) {\r\n        usernamePageRef.current.classList.add('hidden');\r\n        chatPageRef.current.classList.remove('hidden');\r\n\r\n        const socket = new SockJS('http://localhost:8083/ws', null, { withCredentials: true });\r\n        const client = new Client({\r\n            webSocketFactory: () => socket,\r\n            onConnect: onConnected,\r\n            onStompError: onError,\r\n        });\r\n        setStompClient(client);\r\n        client.activate();\r\n    }\r\n\r\n    async function onConnected() {\r\n        console.log('Connected to WebSocket');\r\n        console.log('stompClient value:', stompClient);\r\n\r\n        if (stompClient) {\r\n            // Subscribe to necessary channels\r\n            stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\r\n            stompClient.subscribe(`/topic/public`, onMessageReceived);\r\n\r\n            // Perform operations that depend on stompClient being ready\r\n            document.querySelector('#connected-user-fullname').textContent = currentUser.name;\r\n            await findAndDisplayConnectedUsers();\r\n            await fetchUnreadMessages();\r\n        } else {\r\n            console.error('stompClient is null in onConnected. WebSocket connection may not be properly established.');\r\n        }\r\n    }\r\n\r\n\r\n    async function fetchUnreadMessages() {\r\n        try {\r\n            const unreadMessagesResponse = await fetch(`http://localhost:8083/unread-messages/${userId}`);\r\n            if (unreadMessagesResponse.ok) {\r\n                const unreadMessagesText = await unreadMessagesResponse.text();\r\n                if (unreadMessagesText.trim().length > 0) {\r\n                    const unreadMessages = JSON.parse(unreadMessagesText);\r\n                    unreadMessages.forEach(message => {\r\n                        const notifiedUser = document.querySelector(`#${message.senderId}`);\r\n                        if (notifiedUser) {\r\n                            const nbrMsg = notifiedUser.querySelector('.nbr-msg');\r\n                            if (nbrMsg) {\r\n                                nbrMsg.classList.remove('hidden');\r\n                                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log('No unread messages found.');\r\n                }\r\n            } else if (unreadMessagesResponse.status === 204) {\r\n                console.log('No content found for unread messages.');\r\n            } else {\r\n                console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching unread messages:', error);\r\n        }\r\n    }\r\n\r\n    async function findAndDisplayConnectedUsers() {\r\n        try {\r\n            if (currentUser.role === \"CUSTOMER\") {\r\n                roleSelectListRef.current.classList.add('hidden');\r\n                if (userSaleStaff !== \"\") {\r\n                    const allUsersResponse = await fetch(`http://localhost:8083/user/check/${userSaleStaff}`);\r\n                    const user = await allUsersResponse.json();\r\n                    await renderConnectedUsers([user]);\r\n                }\r\n            } else {\r\n                roleSelectListRef.current.classList.remove('hidden');\r\n                const allUsersResponse = await fetch(`http://localhost:8083/users/${roleSelectRef.current.value}`);\r\n                const users = await allUsersResponse.json();\r\n                await renderConnectedUsers(users.filter(user => user.id !== userId));\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching and displaying connected users:', error);\r\n        }\r\n    }\r\n\r\n    function renderConnectedUsers(users) {\r\n        const connectedUsersList = document.getElementById('connectedUsers');\r\n        connectedUsersList.innerHTML = '';\r\n\r\n        if (users.length === 0) {\r\n            const noUsersMessage = document.createElement('p');\r\n            noUsersMessage.textContent = 'No users connected';\r\n            connectedUsersList.appendChild(noUsersMessage);\r\n        } else {\r\n            users.forEach(user => {\r\n                const listItem = createUserElement(user);\r\n                connectedUsersList.appendChild(listItem);\r\n            });\r\n        }\r\n    }\r\n\r\n    function createUserElement(user) {\r\n        const listItem = document.createElement('li');\r\n        listItem.classList.add('user-item');\r\n        listItem.id = user.id;\r\n\r\n        const userImage = document.createElement('img');\r\n        userImage.src = '/img/user_icon.png';\r\n        userImage.alt = user.id;\r\n\r\n        const usernameSpan = document.createElement('span');\r\n        usernameSpan.textContent = user.name;\r\n\r\n        const receivedMsgs = document.createElement('span');\r\n        receivedMsgs.textContent = '0';\r\n        receivedMsgs.classList.add('nbr-msg', 'hidden');\r\n\r\n        listItem.appendChild(userImage);\r\n        listItem.appendChild(usernameSpan);\r\n        listItem.appendChild(receivedMsgs);\r\n\r\n        listItem.addEventListener('click', userItemClick);\r\n\r\n        return listItem;\r\n    }\r\n\r\n    function onRoleChange() {\r\n        findAndDisplayConnectedUsers(roleSelectRef.current.value).then();\r\n    }\r\n\r\n    async function markMessagesAsRead(recipientId) {\r\n        try {\r\n            const response = await fetch(`http://localhost:8083/mark-messages-as-read/${recipientId}`, {\r\n                method: 'POST'\r\n            });\r\n            if (response.ok) {\r\n                console.log(`Messages for ${recipientId} marked as read.`);\r\n            } else {\r\n                console.error(`Failed to mark messages as read for ${recipientId}: ${response.statusText}`);\r\n            }\r\n        } catch (error) {\r\n            console.error(`Error marking messages as read for ${recipientId}:`, error);\r\n        }\r\n    }\r\n\r\n    async function userItemClick(event) {\r\n        document.querySelectorAll('.user-item').forEach(item => {\r\n            item.classList.remove('active');\r\n        });\r\n        messageFormRef.current.classList.remove('hidden');\r\n\r\n        const clickedUser = event.currentTarget;\r\n        clickedUser.classList.add('active');\r\n\r\n        setSelectedUserId(clickedUser.getAttribute('id'));\r\n\r\n        await markMessagesAsRead(userId);\r\n\r\n        const nbrMsg = clickedUser.querySelector('.nbr-msg');\r\n        nbrMsg.classList.add('hidden');\r\n        nbrMsg.textContent = '0';\r\n    }\r\n\r\n    function displayMessage(senderId, content) {\r\n        const messageContainer = document.createElement('div');\r\n        messageContainer.classList.add('message');\r\n        if (senderId === userId) {\r\n            messageContainer.classList.add('sender');\r\n        } else {\r\n            messageContainer.classList.add('receiver');\r\n        }\r\n\r\n        let messageElement;\r\n        if (content.startsWith('https://')) {\r\n            messageElement = document.createElement('img');\r\n            messageElement.src = content;\r\n            messageElement.alt = 'Uploaded image';\r\n            messageElement.classList.add('uploaded-image');\r\n        } else {\r\n            messageElement = document.createElement('p');\r\n            messageElement.textContent = content;\r\n        }\r\n\r\n        messageContainer.appendChild(messageElement);\r\n        chatAreaRef.current.appendChild(messageContainer);\r\n        chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n    }\r\n\r\n    async function fetchAndDisplayUserChat() {\r\n        const userChatResponse = await fetch(`http://localhost:8083/messages/${userId}/${selectedUserId}`);\r\n        if (userChatResponse.status === 200) {\r\n            const userChat = await userChatResponse.json();\r\n            chatAreaRef.current.innerHTML = '';\r\n            userChat.forEach(chat => {\r\n                displayMessage(chat.senderId, chat.content);\r\n            });\r\n            chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n        } else {\r\n            chatAreaRef.current.innerHTML = '';\r\n            console.log('No chat messages found.');\r\n        }\r\n    }\r\n\r\n    function onError(error) {\r\n        connectingElementRef.current.textContent = 'Could not connect to WebSocket server. Please refresh this page to try again!';\r\n        connectingElementRef.current.style.color = 'red';\r\n        console.error('WebSocket connection error:', error);\r\n    }\r\n\r\n    function sendMessage(event) {\r\n        event.preventDefault();\r\n        const messageContent = messageInputRef.current.value.trim();\r\n        if (messageContent && stompClient) {\r\n            const chatMessage = {\r\n                senderId: userId,\r\n                recipientId: selectedUserIdRef.current,\r\n                content: messageContent,\r\n                timestamp: new Date()\r\n            };\r\n            stompClient.publish({\r\n                destination: \"/app/chat\",\r\n                body: JSON.stringify(chatMessage)\r\n            });\r\n            console.log('Message sent:', chatMessage);\r\n            displayMessage(userId, messageContent);\r\n            messageInputRef.current.value = '';\r\n        }\r\n\r\n\r\n        chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n    }\r\n\r\n    async function onMessageReceived(payload) {\r\n        console.log('PAYLOAD', payload);\r\n        const message = JSON.parse(payload.body);\r\n\r\n        console.log(\"selectedUserId: \", selectedUserId);\r\n        if (selectedUserIdRef.current && selectedUserIdRef.current === message.senderId) {\r\n            displayMessage(message.senderId, message.content);\r\n            console.log('Message received and displayed.');\r\n            chatAreaRef.current.scrollTop = chatAreaRef.current.scrollHeight;\r\n        } else {\r\n            const notifiedUser = document.querySelector(`#${message.senderId}`);\r\n            if (notifiedUser && !notifiedUser.classList.contains('active')) {\r\n                const nbrMsg = notifiedUser.querySelector('.nbr-msg');\r\n                if (nbrMsg) {\r\n                    nbrMsg.classList.remove('hidden');\r\n                    nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n                }\r\n                console.log('Message notification sent:', nbrMsg);\r\n            }\r\n        }\r\n\r\n        // if (selectedUserId) {\r\n        //     document.querySelector(`#${selectedUserId}`).classList.add('active');\r\n        //     console.log('Active user item:', selectedUserId);\r\n        // } else {\r\n        //     messageFormRef.current.classList.add('hidden');\r\n        //     console.log('Hidden message form');\r\n        // }\r\n    }\r\n\r\n    function onLogout() {\r\n        if (stompClient) {\r\n            stompClient.publish({\r\n                destination: \"http://localhost:8083/app/user.disconnectUser\",\r\n                body: JSON.stringify({ id: userId, status: 'OFFLINE' })\r\n            });\r\n            stompClient.deactivate();\r\n        }\r\n        window.location.reload();\r\n    }\r\n\r\n    async function handleImageUpload(event) {\r\n        const imageFile = event.target.files[0];\r\n        if (imageFile) {\r\n            try {\r\n                const formData = new FormData();\r\n                formData.append('senderId', userId);\r\n                formData.append('recipientId', selectedUserIdRef.current);\r\n                formData.append('message', messageInputRef.current.value);\r\n\r\n                const resizedImageFile = await resizeImage(imageFile);\r\n                formData.append('file', resizedImageFile);\r\n\r\n                const response = await fetch('http://localhost:8083/chat/upload', {\r\n                    method: 'POST',\r\n                    body: formData\r\n                });\r\n\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to upload image');\r\n                }\r\n\r\n                const imageURL = await response.text();\r\n                displayMessage(userId, imageURL);\r\n\r\n                messageInputRef.current.value = '';\r\n                imageInputRef.current.value = '';\r\n            } catch (error) {\r\n                console.error('Error uploading image:', error);\r\n                alert('Failed to upload image. Please try again later.');\r\n            }\r\n        }\r\n    }\r\n\r\n    async function resizeImage(imageFile) {\r\n        const maxSize = 1024;\r\n        return new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(imageFile);\r\n            reader.onload = function (event) {\r\n                const img = new Image();\r\n                img.src = event.target.result;\r\n                img.onload = function () {\r\n                    let width = img.width;\r\n                    let height = img.height;\r\n\r\n                    if (width > height) {\r\n                        if (width > maxSize) {\r\n                            height *= maxSize / width;\r\n                            width = maxSize;\r\n                        }\r\n                    } else {\r\n                        if (height > maxSize) {\r\n                            width *= maxSize / height;\r\n                            height = maxSize;\r\n                        }\r\n                    }\r\n\r\n                    const canvas = document.createElement('canvas');\r\n                    canvas.width = width;\r\n                    canvas.height = height;\r\n                    const ctx = canvas.getContext('2d');\r\n                    ctx.drawImage(img, 0, 0, width, height);\r\n\r\n                    canvas.toBlob((blob) => {\r\n                        resolve(new File([blob], imageFile.name, { type: imageFile.type }));\r\n                    }, imageFile.type);\r\n                };\r\n            };\r\n            reader.onerror = reject;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"user-form\" ref={usernamePageRef}>\r\n                <h2>Enter Chatroom</h2>\r\n                <form ref={usernameFormRef}>\r\n                    <label htmlFor=\"id\">UserId:</label>\r\n                    <input type=\"text\" id=\"id\" name=\"id\" required />\r\n                    <button type=\"submit\">Enter Chatroom</button>\r\n                </form>\r\n            </div>\r\n\r\n            <div className=\"chat-container hidden\" ref={chatPageRef}>\r\n                <div className=\"users-list\">\r\n                    <div className=\"users-list-container\">\r\n                        <h2>Online Users</h2>\r\n                        <label htmlFor=\"role-select\"></label>\r\n                        <div className=\"role-select-list hidden\" ref={roleSelectListRef}>\r\n                            <select id=\"role-select\" ref={roleSelectRef}>\r\n                                <option value=\"CUSTOMER\">Customer</option>\r\n                                <option value=\"STAFF\">Staff</option>\r\n                                <option value=\"MANAGER\">Manager</option>\r\n                            </select>\r\n                        </div>\r\n                        <ul id=\"connectedUsers\"></ul>\r\n                    </div>\r\n                    <div>\r\n                        <p id=\"connected-user-fullname\"></p>\r\n                        <a className=\"logout\" href=\"#\" onClick={onLogout}>Logout</a>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"chat-area\">\r\n                    <div className=\"chat-area\" id=\"chat-messages\" ref={chatAreaRef}></div>\r\n\r\n                    <form id=\"messageForm\" name=\"messageForm\" className=\"hidden\" ref={messageFormRef}>\r\n                        <div className=\"message-input\">\r\n                            <input\r\n                                autoComplete=\"off\"\r\n                                type=\"text\"\r\n                                id=\"message\"\r\n                                placeholder=\"Type your message...\"\r\n                                writingsuggestions=\"enabled\"\r\n                                ref={messageInputRef}\r\n                            />\r\n                            <input type=\"file\" id=\"imageInput\" accept=\"image/*\" ref={imageInputRef} />\r\n                            <button>Send</button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ChatComponent;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}