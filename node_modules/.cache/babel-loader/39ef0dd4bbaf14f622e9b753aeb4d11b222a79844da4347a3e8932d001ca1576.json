{"ast":null,"code":"var _jsxFileName = \"E:\\\\Hoc\\\\Ky 5\\\\SWP391\\\\GITHUB\\\\oldClone\\\\one-to-one-chat-spring-boot-web-socket - V7 - ConvertToReactJS - cont\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport SockJS from 'sockjs-client';\nimport Stomp from 'stompjs';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [userId, setUserId] = useState('');\n  const [userSaleStaff, setUserSaleStaff] = useState('');\n  const [currentUser, setCurrentUser] = useState(null);\n  const [stompClient, setStompClient] = useState(null);\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [connectedUsers, setConnectedUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    const handleBeforeUnload = () => onLogout();\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n    };\n  }, []);\n  const connect = async event => {\n    event.preventDefault();\n    if (userId.trim()) {\n      try {\n        const saleStaffResponse = await fetch(`/${userId}/sale-staff`);\n        const userSaleStaffText = await saleStaffResponse.text();\n        setUserSaleStaff(userSaleStaffText);\n        const response = await fetch(`/user/check/${userId}`);\n        if (response.ok) {\n          const user = await response.json();\n          setCurrentUser(user);\n          onUserFound(user);\n        } else if (response.status === 404) {\n          alert('User not found. Please enter a valid ID.');\n        } else {\n          console.error('Error checking user:', response.statusText);\n        }\n      } catch (error) {\n        console.error('Error checking user:', error);\n      }\n    } else {\n      alert('Please enter a user ID.');\n    }\n  };\n  const onUserFound = user => {\n    const socket = new SockJS('/ws');\n    const stompClient = Stomp.over(socket);\n    stompClient.connect({}, onConnected, onError);\n    setStompClient(stompClient);\n  };\n  const onConnected = async () => {\n    console.log('Connected to WebSocket');\n    stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\n    stompClient.subscribe(`/topic/public`, onMessageReceived);\n    document.querySelector('#connected-user-fullname').textContent = currentUser.name;\n    await findAndDisplayConnectedUsers();\n  };\n  const onError = error => {\n    console.error('WebSocket connection error:', error);\n  };\n  const findAndDisplayConnectedUsers = async () => {\n    try {\n      let users = [];\n      if (currentUser.role === 'CUSTOMER') {\n        if (userSaleStaff) {\n          const allUsersResponse = await fetch(`/user/check/${userSaleStaff}`);\n          const user = await allUsersResponse.json();\n          users = [user];\n        }\n      } else {\n        const allUsersResponse = await fetch(`/users/${roleSelect.value}`);\n        users = await allUsersResponse.json();\n        users = users.filter(user => user.id !== userId);\n      }\n      setConnectedUsers(users);\n      await fetchUnreadMessages();\n    } catch (error) {\n      console.error('Error fetching and displaying connected users:', error);\n    }\n  };\n  const fetchUnreadMessages = async () => {\n    try {\n      const unreadMessagesResponse = await fetch(`/unread-messages/${userId}`);\n      if (unreadMessagesResponse.ok) {\n        const unreadMessagesText = await unreadMessagesResponse.text();\n        if (unreadMessagesText.trim().length > 0) {\n          const unreadMessages = JSON.parse(unreadMessagesText);\n          unreadMessages.forEach(message => {\n            const notifiedUser = document.querySelector(`#${message.senderId}`);\n            if (notifiedUser) {\n              const nbrMsg = notifiedUser.querySelector('.nbr-msg');\n              if (nbrMsg) {\n                nbrMsg.classList.remove('hidden');\n                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n              }\n            }\n          });\n        } else {\n          console.log('No unread messages found.');\n        }\n      } else if (unreadMessagesResponse.status === 204) {\n        console.log('No content found for unread messages.');\n      } else {\n        console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\n      }\n    } catch (error) {\n      console.error('Error fetching unread messages:', error);\n    }\n  };\n  const onMessageReceived = payload => {\n    console.log('PAYLOAD', payload);\n    const message = JSON.parse(payload.body);\n    if (selectedUserId && selectedUserId === message.senderId) {\n      setMessages(prevMessages => [...prevMessages, message]);\n      console.log('Gui duoc roi neeee');\n      // chatArea.scrollTop = chatArea.scrollHeight;\n    } else {\n      const notifiedUser = document.querySelector(`#${message.senderId}`);\n      if (notifiedUser && !notifiedUser.classList.contains('active')) {\n        const nbrMsg = notifiedUser.querySelector('.nbr-msg');\n        if (nbrMsg) {\n          nbrMsg.classList.remove('hidden');\n          nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\n        }\n        console.log('Message notification sent:', nbrMsg);\n      }\n    }\n    if (selectedUserId) {\n      document.querySelector(`#${selectedUserId}`).classList.add('active');\n      console.log('Active user item:', selectedUserId);\n    } else {\n      // messageForm.classList.add('hidden');\n      console.log('Hidden message form');\n    }\n  };\n  const sendMessage = event => {\n    event.preventDefault();\n    const messageContent = messageInput.value.trim();\n    if (messageContent && stompClient) {\n      const chatMessage = {\n        senderId: userId,\n        recipientId: selectedUserId,\n        content: messageContent,\n        timestamp: new Date()\n      };\n      stompClient.send(\"/app/chat\", {}, JSON.stringify(chatMessage));\n      console.log('Message sent:', chatMessage);\n      setMessages(prevMessages => [...prevMessages, chatMessage]);\n      messageInput.value = '';\n    }\n\n    // chatArea.scrollTop = chatArea.scrollHeight;\n  };\n  const onLogout = () => {\n    if (stompClient) {\n      stompClient.send(\"/app/user.disconnectUser\", {}, JSON.stringify({\n        id: userId,\n        status: 'OFFLINE'\n      }));\n      stompClient.disconnect();\n    }\n    window.location.reload();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"One to One Chat | Spring boot & Websocket\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), !currentUser ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-form\",\n      id: \"username-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Enter Chatroom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        id: \"usernameForm\",\n        onSubmit: connect,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"id\",\n          children: \"UserId:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"id\",\n          name: \"id\",\n          required: true,\n          value: userId,\n          onChange: e => setUserId(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Enter Chatroom\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      id: \"chat-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"users-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"users-list-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Online Users\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"role-select-list\",\n            id: \"role-select\",\n            onChange: e => findAndDisplayConnectedUsers(e.target.value),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"CUSTOMER\",\n              children: \"User\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"STAFF\",\n              children: \"Staff\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"MANAGER\",\n              children: \"Manager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"connectedUsers\",\n            children: connectedUsers.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"No users connected\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 37\n            }, this) : connectedUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `user-item ${selectedUserId === user.id ? 'active' : ''}`,\n              onClick: () => setSelectedUserId(user.id),\n              children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"../img/user_icon.png\",\n                alt: user.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 224,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                children: user.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 225,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"nbr-msg hidden\",\n                children: \"0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 45\n              }, this)]\n            }, user.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 41\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            id: \"connected-user-fullname\",\n            children: currentUser.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            id: \"logout-btn\",\n            onClick: onLogout,\n            children: \"Logout\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-box\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-box-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n            id: \"chatArea\",\n            className: \"chat-messages\",\n            children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: `message ${msg.senderId === userId ? 'sent' : 'received'}`,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: msg.content\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: msg.timestamp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 41\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 37\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            id: \"messageForm\",\n            onSubmit: sendMessage,\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"input-group clearfix\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"message\",\n                placeholder: \"Type a message...\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                children: \"Send\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"KjJUfcLCntMsr7bhgK6MwXdHQRg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","SockJS","Stomp","jsxDEV","_jsxDEV","App","_s","userId","setUserId","userSaleStaff","setUserSaleStaff","currentUser","setCurrentUser","stompClient","setStompClient","selectedUserId","setSelectedUserId","connectedUsers","setConnectedUsers","messages","setMessages","handleBeforeUnload","onLogout","window","addEventListener","removeEventListener","connect","event","preventDefault","trim","saleStaffResponse","fetch","userSaleStaffText","text","response","ok","user","json","onUserFound","status","alert","console","error","statusText","socket","over","onConnected","onError","log","subscribe","onMessageReceived","document","querySelector","textContent","name","findAndDisplayConnectedUsers","users","role","allUsersResponse","roleSelect","value","filter","id","fetchUnreadMessages","unreadMessagesResponse","unreadMessagesText","length","unreadMessages","JSON","parse","forEach","message","notifiedUser","senderId","nbrMsg","classList","remove","parseInt","payload","body","prevMessages","contains","add","sendMessage","messageContent","messageInput","chatMessage","recipientId","content","timestamp","Date","send","stringify","disconnect","location","reload","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","required","onChange","e","target","map","onClick","src","alt","msg","index","placeholder","_c","$RefreshReg$"],"sources":["E:/Hoc/Ky 5/SWP391/GITHUB/oldClone/one-to-one-chat-spring-boot-web-socket - V7 - ConvertToReactJS - cont/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport SockJS from 'sockjs-client';\r\nimport Stomp from 'stompjs';\r\nimport './index.css';\r\n\r\nconst App = () => {\r\n    const [userId, setUserId] = useState('');\r\n    const [userSaleStaff, setUserSaleStaff] = useState('');\r\n    const [currentUser, setCurrentUser] = useState(null);\r\n    const [stompClient, setStompClient] = useState(null);\r\n    const [selectedUserId, setSelectedUserId] = useState('');\r\n    const [connectedUsers, setConnectedUsers] = useState([]);\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const handleBeforeUnload = () => onLogout();\r\n        window.addEventListener('beforeunload', handleBeforeUnload);\r\n\r\n        return () => {\r\n            window.removeEventListener('beforeunload', handleBeforeUnload);\r\n        };\r\n    }, []);\r\n\r\n    const connect = async (event) => {\r\n        event.preventDefault();\r\n\r\n        if (userId.trim()) {\r\n            try {\r\n                const saleStaffResponse = await fetch(`/${userId}/sale-staff`);\r\n                const userSaleStaffText = await saleStaffResponse.text();\r\n                setUserSaleStaff(userSaleStaffText);\r\n\r\n                const response = await fetch(`/user/check/${userId}`);\r\n                if (response.ok) {\r\n                    const user = await response.json();\r\n                    setCurrentUser(user);\r\n                    onUserFound(user);\r\n                } else if (response.status === 404) {\r\n                    alert('User not found. Please enter a valid ID.');\r\n                } else {\r\n                    console.error('Error checking user:', response.statusText);\r\n                }\r\n            } catch (error) {\r\n                console.error('Error checking user:', error);\r\n            }\r\n        } else {\r\n            alert('Please enter a user ID.');\r\n        }\r\n    };\r\n\r\n    const onUserFound = (user) => {\r\n        const socket = new SockJS('/ws');\r\n        const stompClient = Stomp.over(socket);\r\n\r\n        stompClient.connect({}, onConnected, onError);\r\n        setStompClient(stompClient);\r\n    };\r\n\r\n    const onConnected = async () => {\r\n        console.log('Connected to WebSocket');\r\n        stompClient.subscribe(`/user/${userId}/queue/messages`, onMessageReceived);\r\n        stompClient.subscribe(`/topic/public`, onMessageReceived);\r\n\r\n        document.querySelector('#connected-user-fullname').textContent = currentUser.name;\r\n\r\n        await findAndDisplayConnectedUsers();\r\n    };\r\n\r\n    const onError = (error) => {\r\n        console.error('WebSocket connection error:', error);\r\n    };\r\n\r\n    const findAndDisplayConnectedUsers = async () => {\r\n        try {\r\n            let users = [];\r\n            if (currentUser.role === 'CUSTOMER') {\r\n                if (userSaleStaff) {\r\n                    const allUsersResponse = await fetch(`/user/check/${userSaleStaff}`);\r\n                    const user = await allUsersResponse.json();\r\n                    users = [user];\r\n                }\r\n            } else {\r\n                const allUsersResponse = await fetch(`/users/${roleSelect.value}`);\r\n                users = await allUsersResponse.json();\r\n                users = users.filter(user => user.id !== userId);\r\n            }\r\n            setConnectedUsers(users);\r\n            await fetchUnreadMessages();\r\n        } catch (error) {\r\n            console.error('Error fetching and displaying connected users:', error);\r\n        }\r\n    };\r\n\r\n    const fetchUnreadMessages = async () => {\r\n        try {\r\n            const unreadMessagesResponse = await fetch(`/unread-messages/${userId}`);\r\n            if (unreadMessagesResponse.ok) {\r\n                const unreadMessagesText = await unreadMessagesResponse.text();\r\n                if (unreadMessagesText.trim().length > 0) {\r\n                    const unreadMessages = JSON.parse(unreadMessagesText);\r\n                    unreadMessages.forEach(message => {\r\n                        const notifiedUser = document.querySelector(`#${message.senderId}`);\r\n                        if (notifiedUser) {\r\n                            const nbrMsg = notifiedUser.querySelector('.nbr-msg');\r\n                            if (nbrMsg) {\r\n                                nbrMsg.classList.remove('hidden');\r\n                                nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n                            }\r\n                        }\r\n                    });\r\n                } else {\r\n                    console.log('No unread messages found.');\r\n                }\r\n            } else if (unreadMessagesResponse.status === 204) {\r\n                console.log('No content found for unread messages.');\r\n            } else {\r\n                console.error('Failed to fetch unread messages:', unreadMessagesResponse.statusText);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error fetching unread messages:', error);\r\n        }\r\n    };\r\n\r\n    const onMessageReceived = (payload) => {\r\n        console.log('PAYLOAD', payload);\r\n        const message = JSON.parse(payload.body);\r\n\r\n        if (selectedUserId && selectedUserId === message.senderId) {\r\n            setMessages(prevMessages => [...prevMessages, message]);\r\n            console.log('Gui duoc roi neeee');\r\n            // chatArea.scrollTop = chatArea.scrollHeight;\r\n        } else {\r\n            const notifiedUser = document.querySelector(`#${message.senderId}`);\r\n            if (notifiedUser && !notifiedUser.classList.contains('active')) {\r\n                const nbrMsg = notifiedUser.querySelector('.nbr-msg');\r\n                if (nbrMsg) {\r\n                    nbrMsg.classList.remove('hidden');\r\n                    nbrMsg.textContent = parseInt(nbrMsg.textContent) + 1;\r\n                }\r\n                console.log('Message notification sent:', nbrMsg);\r\n            }\r\n        }\r\n\r\n        if (selectedUserId) {\r\n            document.querySelector(`#${selectedUserId}`).classList.add('active');\r\n            console.log('Active user item:', selectedUserId);\r\n        } else {\r\n            // messageForm.classList.add('hidden');\r\n            console.log('Hidden message form');\r\n        }\r\n    };\r\n\r\n    const sendMessage = (event) => {\r\n        event.preventDefault();\r\n\r\n        const messageContent = messageInput.value.trim();\r\n        if (messageContent && stompClient) {\r\n            const chatMessage = {\r\n                senderId: userId,\r\n                recipientId: selectedUserId,\r\n                content: messageContent,\r\n                timestamp: new Date()\r\n            };\r\n            stompClient.send(\"/app/chat\", {}, JSON.stringify(chatMessage));\r\n            console.log('Message sent:', chatMessage);\r\n            setMessages(prevMessages => [...prevMessages, chatMessage]);\r\n            messageInput.value = '';\r\n        }\r\n\r\n        // chatArea.scrollTop = chatArea.scrollHeight;\r\n    };\r\n\r\n    const onLogout = () => {\r\n        if (stompClient) {\r\n            stompClient.send(\"/app/user.disconnectUser\", {}, JSON.stringify({ id: userId, status: 'OFFLINE' }));\r\n            stompClient.disconnect();\r\n        }\r\n        window.location.reload();\r\n    };\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <h2>One to One Chat | Spring boot & Websocket</h2>\r\n            {!currentUser ? (\r\n                <div className=\"user-form\" id=\"username-page\">\r\n                    <h2>Enter Chatroom</h2>\r\n                    <form id=\"usernameForm\" onSubmit={connect}>\r\n                        <label htmlFor=\"id\">UserId:</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"id\"\r\n                            name=\"id\"\r\n                            required\r\n                            value={userId}\r\n                            onChange={(e) => setUserId(e.target.value)}\r\n                        />\r\n                        <button type=\"submit\">Enter Chatroom</button>\r\n                    </form>\r\n                </div>\r\n            ) : (\r\n                <div className=\"chat-container\" id=\"chat-page\">\r\n                    <div className=\"users-list\">\r\n                        <div className=\"users-list-container\">\r\n                            <h2>Online Users</h2>\r\n                            <select\r\n                                className=\"role-select-list\"\r\n                                id=\"role-select\"\r\n                                onChange={(e) => findAndDisplayConnectedUsers(e.target.value)}\r\n                            >\r\n                                <option value=\"CUSTOMER\">User</option>\r\n                                <option value=\"STAFF\">Staff</option>\r\n                                <option value=\"MANAGER\">Manager</option>\r\n                            </select>\r\n                            <ul id=\"connectedUsers\">\r\n                                {connectedUsers.length === 0 ? (\r\n                                    <p>No users connected</p>\r\n                                ) : (\r\n                                    connectedUsers.map(user => (\r\n                                        <li\r\n                                            key={user.id}\r\n                                            className={`user-item ${selectedUserId === user.id ? 'active' : ''}`}\r\n                                            onClick={() => setSelectedUserId(user.id)}\r\n                                        >\r\n                                            <img src=\"../img/user_icon.png\" alt={user.id} />\r\n                                            <span>{user.name}</span>\r\n                                            <span className=\"nbr-msg hidden\">0</span>\r\n                                        </li>\r\n                                    ))\r\n                                )}\r\n                            </ul>\r\n                        </div>\r\n                        <div>\r\n                            <p id=\"connected-user-fullname\">{currentUser.name}</p>\r\n                            <button id=\"logout-btn\" onClick={onLogout}>Logout</button>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"chat-box\">\r\n                        <div className=\"chat-box-container\">\r\n                            <ul id=\"chatArea\" className=\"chat-messages\">\r\n                                {messages.map((msg, index) => (\r\n                                    <li key={index} className={`message ${msg.senderId === userId ? 'sent' : 'received'}`}>\r\n                                        <span>{msg.content}</span>\r\n                                        <p>{msg.timestamp}</p>\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                            <form id=\"messageForm\" onSubmit={sendMessage}>\r\n                                <div className=\"input-group clearfix\">\r\n                                    <input type=\"text\" id=\"message\" placeholder=\"Type a message...\" />\r\n                                    <button type=\"submit\">Send</button>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,eAAe;AAClC,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACU,aAAa,EAAEC,gBAAgB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACY,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,WAAW,EAAEC,cAAc,CAAC,GAAGf,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACgB,cAAc,EAAEC,iBAAiB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACoB,QAAQ,EAAEC,WAAW,CAAC,GAAGrB,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ,MAAMqB,kBAAkB,GAAGA,CAAA,KAAMC,QAAQ,CAAC,CAAC;IAC3CC,MAAM,CAACC,gBAAgB,CAAC,cAAc,EAAEH,kBAAkB,CAAC;IAE3D,OAAO,MAAM;MACTE,MAAM,CAACE,mBAAmB,CAAC,cAAc,EAAEJ,kBAAkB,CAAC;IAClE,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMK,OAAO,GAAG,MAAOC,KAAK,IAAK;IAC7BA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,IAAIrB,MAAM,CAACsB,IAAI,CAAC,CAAC,EAAE;MACf,IAAI;QACA,MAAMC,iBAAiB,GAAG,MAAMC,KAAK,CAAC,IAAIxB,MAAM,aAAa,CAAC;QAC9D,MAAMyB,iBAAiB,GAAG,MAAMF,iBAAiB,CAACG,IAAI,CAAC,CAAC;QACxDvB,gBAAgB,CAACsB,iBAAiB,CAAC;QAEnC,MAAME,QAAQ,GAAG,MAAMH,KAAK,CAAC,eAAexB,MAAM,EAAE,CAAC;QACrD,IAAI2B,QAAQ,CAACC,EAAE,EAAE;UACb,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;UAClCzB,cAAc,CAACwB,IAAI,CAAC;UACpBE,WAAW,CAACF,IAAI,CAAC;QACrB,CAAC,MAAM,IAAIF,QAAQ,CAACK,MAAM,KAAK,GAAG,EAAE;UAChCC,KAAK,CAAC,0CAA0C,CAAC;QACrD,CAAC,MAAM;UACHC,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAER,QAAQ,CAACS,UAAU,CAAC;QAC9D;MACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZD,OAAO,CAACC,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAChD;IACJ,CAAC,MAAM;MACHF,KAAK,CAAC,yBAAyB,CAAC;IACpC;EACJ,CAAC;EAED,MAAMF,WAAW,GAAIF,IAAI,IAAK;IAC1B,MAAMQ,MAAM,GAAG,IAAI3C,MAAM,CAAC,KAAK,CAAC;IAChC,MAAMY,WAAW,GAAGX,KAAK,CAAC2C,IAAI,CAACD,MAAM,CAAC;IAEtC/B,WAAW,CAACa,OAAO,CAAC,CAAC,CAAC,EAAEoB,WAAW,EAAEC,OAAO,CAAC;IAC7CjC,cAAc,CAACD,WAAW,CAAC;EAC/B,CAAC;EAED,MAAMiC,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC5BL,OAAO,CAACO,GAAG,CAAC,wBAAwB,CAAC;IACrCnC,WAAW,CAACoC,SAAS,CAAC,SAAS1C,MAAM,iBAAiB,EAAE2C,iBAAiB,CAAC;IAC1ErC,WAAW,CAACoC,SAAS,CAAC,eAAe,EAAEC,iBAAiB,CAAC;IAEzDC,QAAQ,CAACC,aAAa,CAAC,0BAA0B,CAAC,CAACC,WAAW,GAAG1C,WAAW,CAAC2C,IAAI;IAEjF,MAAMC,4BAA4B,CAAC,CAAC;EACxC,CAAC;EAED,MAAMR,OAAO,GAAIL,KAAK,IAAK;IACvBD,OAAO,CAACC,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;EACvD,CAAC;EAED,MAAMa,4BAA4B,GAAG,MAAAA,CAAA,KAAY;IAC7C,IAAI;MACA,IAAIC,KAAK,GAAG,EAAE;MACd,IAAI7C,WAAW,CAAC8C,IAAI,KAAK,UAAU,EAAE;QACjC,IAAIhD,aAAa,EAAE;UACf,MAAMiD,gBAAgB,GAAG,MAAM3B,KAAK,CAAC,eAAetB,aAAa,EAAE,CAAC;UACpE,MAAM2B,IAAI,GAAG,MAAMsB,gBAAgB,CAACrB,IAAI,CAAC,CAAC;UAC1CmB,KAAK,GAAG,CAACpB,IAAI,CAAC;QAClB;MACJ,CAAC,MAAM;QACH,MAAMsB,gBAAgB,GAAG,MAAM3B,KAAK,CAAC,UAAU4B,UAAU,CAACC,KAAK,EAAE,CAAC;QAClEJ,KAAK,GAAG,MAAME,gBAAgB,CAACrB,IAAI,CAAC,CAAC;QACrCmB,KAAK,GAAGA,KAAK,CAACK,MAAM,CAACzB,IAAI,IAAIA,IAAI,CAAC0B,EAAE,KAAKvD,MAAM,CAAC;MACpD;MACAW,iBAAiB,CAACsC,KAAK,CAAC;MACxB,MAAMO,mBAAmB,CAAC,CAAC;IAC/B,CAAC,CAAC,OAAOrB,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,gDAAgD,EAAEA,KAAK,CAAC;IAC1E;EACJ,CAAC;EAED,MAAMqB,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACA,MAAMC,sBAAsB,GAAG,MAAMjC,KAAK,CAAC,oBAAoBxB,MAAM,EAAE,CAAC;MACxE,IAAIyD,sBAAsB,CAAC7B,EAAE,EAAE;QAC3B,MAAM8B,kBAAkB,GAAG,MAAMD,sBAAsB,CAAC/B,IAAI,CAAC,CAAC;QAC9D,IAAIgC,kBAAkB,CAACpC,IAAI,CAAC,CAAC,CAACqC,MAAM,GAAG,CAAC,EAAE;UACtC,MAAMC,cAAc,GAAGC,IAAI,CAACC,KAAK,CAACJ,kBAAkB,CAAC;UACrDE,cAAc,CAACG,OAAO,CAACC,OAAO,IAAI;YAC9B,MAAMC,YAAY,GAAGrB,QAAQ,CAACC,aAAa,CAAC,IAAImB,OAAO,CAACE,QAAQ,EAAE,CAAC;YACnE,IAAID,YAAY,EAAE;cACd,MAAME,MAAM,GAAGF,YAAY,CAACpB,aAAa,CAAC,UAAU,CAAC;cACrD,IAAIsB,MAAM,EAAE;gBACRA,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;gBACjCF,MAAM,CAACrB,WAAW,GAAGwB,QAAQ,CAACH,MAAM,CAACrB,WAAW,CAAC,GAAG,CAAC;cACzD;YACJ;UACJ,CAAC,CAAC;QACN,CAAC,MAAM;UACHZ,OAAO,CAACO,GAAG,CAAC,2BAA2B,CAAC;QAC5C;MACJ,CAAC,MAAM,IAAIgB,sBAAsB,CAACzB,MAAM,KAAK,GAAG,EAAE;QAC9CE,OAAO,CAACO,GAAG,CAAC,uCAAuC,CAAC;MACxD,CAAC,MAAM;QACHP,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEsB,sBAAsB,CAACrB,UAAU,CAAC;MACxF;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IAC3D;EACJ,CAAC;EAED,MAAMQ,iBAAiB,GAAI4B,OAAO,IAAK;IACnCrC,OAAO,CAACO,GAAG,CAAC,SAAS,EAAE8B,OAAO,CAAC;IAC/B,MAAMP,OAAO,GAAGH,IAAI,CAACC,KAAK,CAACS,OAAO,CAACC,IAAI,CAAC;IAExC,IAAIhE,cAAc,IAAIA,cAAc,KAAKwD,OAAO,CAACE,QAAQ,EAAE;MACvDrD,WAAW,CAAC4D,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAET,OAAO,CAAC,CAAC;MACvD9B,OAAO,CAACO,GAAG,CAAC,oBAAoB,CAAC;MACjC;IACJ,CAAC,MAAM;MACH,MAAMwB,YAAY,GAAGrB,QAAQ,CAACC,aAAa,CAAC,IAAImB,OAAO,CAACE,QAAQ,EAAE,CAAC;MACnE,IAAID,YAAY,IAAI,CAACA,YAAY,CAACG,SAAS,CAACM,QAAQ,CAAC,QAAQ,CAAC,EAAE;QAC5D,MAAMP,MAAM,GAAGF,YAAY,CAACpB,aAAa,CAAC,UAAU,CAAC;QACrD,IAAIsB,MAAM,EAAE;UACRA,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;UACjCF,MAAM,CAACrB,WAAW,GAAGwB,QAAQ,CAACH,MAAM,CAACrB,WAAW,CAAC,GAAG,CAAC;QACzD;QACAZ,OAAO,CAACO,GAAG,CAAC,4BAA4B,EAAE0B,MAAM,CAAC;MACrD;IACJ;IAEA,IAAI3D,cAAc,EAAE;MAChBoC,QAAQ,CAACC,aAAa,CAAC,IAAIrC,cAAc,EAAE,CAAC,CAAC4D,SAAS,CAACO,GAAG,CAAC,QAAQ,CAAC;MACpEzC,OAAO,CAACO,GAAG,CAAC,mBAAmB,EAAEjC,cAAc,CAAC;IACpD,CAAC,MAAM;MACH;MACA0B,OAAO,CAACO,GAAG,CAAC,qBAAqB,CAAC;IACtC;EACJ,CAAC;EAED,MAAMmC,WAAW,GAAIxD,KAAK,IAAK;IAC3BA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMwD,cAAc,GAAGC,YAAY,CAACzB,KAAK,CAAC/B,IAAI,CAAC,CAAC;IAChD,IAAIuD,cAAc,IAAIvE,WAAW,EAAE;MAC/B,MAAMyE,WAAW,GAAG;QAChBb,QAAQ,EAAElE,MAAM;QAChBgF,WAAW,EAAExE,cAAc;QAC3ByE,OAAO,EAAEJ,cAAc;QACvBK,SAAS,EAAE,IAAIC,IAAI,CAAC;MACxB,CAAC;MACD7E,WAAW,CAAC8E,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,EAAEvB,IAAI,CAACwB,SAAS,CAACN,WAAW,CAAC,CAAC;MAC9D7C,OAAO,CAACO,GAAG,CAAC,eAAe,EAAEsC,WAAW,CAAC;MACzClE,WAAW,CAAC4D,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAEM,WAAW,CAAC,CAAC;MAC3DD,YAAY,CAACzB,KAAK,GAAG,EAAE;IAC3B;;IAEA;EACJ,CAAC;EAED,MAAMtC,QAAQ,GAAGA,CAAA,KAAM;IACnB,IAAIT,WAAW,EAAE;MACbA,WAAW,CAAC8E,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC,EAAEvB,IAAI,CAACwB,SAAS,CAAC;QAAE9B,EAAE,EAAEvD,MAAM;QAAEgC,MAAM,EAAE;MAAU,CAAC,CAAC,CAAC;MACnG1B,WAAW,CAACgF,UAAU,CAAC,CAAC;IAC5B;IACAtE,MAAM,CAACuE,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC5B,CAAC;EAED,oBACI3F,OAAA;IAAK4F,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB7F,OAAA;MAAA6F,QAAA,EAAI;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjD,CAAC1F,WAAW,gBACTP,OAAA;MAAK4F,SAAS,EAAC,WAAW;MAAClC,EAAE,EAAC,eAAe;MAAAmC,QAAA,gBACzC7F,OAAA;QAAA6F,QAAA,EAAI;MAAc;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvBjG,OAAA;QAAM0D,EAAE,EAAC,cAAc;QAACwC,QAAQ,EAAE5E,OAAQ;QAAAuE,QAAA,gBACtC7F,OAAA;UAAOmG,OAAO,EAAC,IAAI;UAAAN,QAAA,EAAC;QAAO;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACnCjG,OAAA;UACIoG,IAAI,EAAC,MAAM;UACX1C,EAAE,EAAC,IAAI;UACPR,IAAI,EAAC,IAAI;UACTmD,QAAQ;UACR7C,KAAK,EAAErD,MAAO;UACdmG,QAAQ,EAAGC,CAAC,IAAKnG,SAAS,CAACmG,CAAC,CAACC,MAAM,CAAChD,KAAK;QAAE;UAAAsC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,eACFjG,OAAA;UAAQoG,IAAI,EAAC,QAAQ;UAAAP,QAAA,EAAC;QAAc;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC,gBAENjG,OAAA;MAAK4F,SAAS,EAAC,gBAAgB;MAAClC,EAAE,EAAC,WAAW;MAAAmC,QAAA,gBAC1C7F,OAAA;QAAK4F,SAAS,EAAC,YAAY;QAAAC,QAAA,gBACvB7F,OAAA;UAAK4F,SAAS,EAAC,sBAAsB;UAAAC,QAAA,gBACjC7F,OAAA;YAAA6F,QAAA,EAAI;UAAY;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACrBjG,OAAA;YACI4F,SAAS,EAAC,kBAAkB;YAC5BlC,EAAE,EAAC,aAAa;YAChB4C,QAAQ,EAAGC,CAAC,IAAKpD,4BAA4B,CAACoD,CAAC,CAACC,MAAM,CAAChD,KAAK,CAAE;YAAAqC,QAAA,gBAE9D7F,OAAA;cAAQwD,KAAK,EAAC,UAAU;cAAAqC,QAAA,EAAC;YAAI;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACtCjG,OAAA;cAAQwD,KAAK,EAAC,OAAO;cAAAqC,QAAA,EAAC;YAAK;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eACpCjG,OAAA;cAAQwD,KAAK,EAAC,SAAS;cAAAqC,QAAA,EAAC;YAAO;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACpC,CAAC,eACTjG,OAAA;YAAI0D,EAAE,EAAC,gBAAgB;YAAAmC,QAAA,EAClBhF,cAAc,CAACiD,MAAM,KAAK,CAAC,gBACxB9D,OAAA;cAAA6F,QAAA,EAAG;YAAkB;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC,GAEzBpF,cAAc,CAAC4F,GAAG,CAACzE,IAAI,iBACnBhC,OAAA;cAEI4F,SAAS,EAAE,aAAajF,cAAc,KAAKqB,IAAI,CAAC0B,EAAE,GAAG,QAAQ,GAAG,EAAE,EAAG;cACrEgD,OAAO,EAAEA,CAAA,KAAM9F,iBAAiB,CAACoB,IAAI,CAAC0B,EAAE,CAAE;cAAAmC,QAAA,gBAE1C7F,OAAA;gBAAK2G,GAAG,EAAC,sBAAsB;gBAACC,GAAG,EAAE5E,IAAI,CAAC0B;cAAG;gBAAAoC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAChDjG,OAAA;gBAAA6F,QAAA,EAAO7D,IAAI,CAACkB;cAAI;gBAAA4C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eACxBjG,OAAA;gBAAM4F,SAAS,EAAC,gBAAgB;gBAAAC,QAAA,EAAC;cAAC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAM,CAAC;YAAA,GANpCjE,IAAI,CAAC0B,EAAE;cAAAoC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAOZ,CACP;UACJ;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACD,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACJ,CAAC,eACNjG,OAAA;UAAA6F,QAAA,gBACI7F,OAAA;YAAG0D,EAAE,EAAC,yBAAyB;YAAAmC,QAAA,EAAEtF,WAAW,CAAC2C;UAAI;YAAA4C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACtDjG,OAAA;YAAQ0D,EAAE,EAAC,YAAY;YAACgD,OAAO,EAAExF,QAAS;YAAA2E,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzD,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eACNjG,OAAA;QAAK4F,SAAS,EAAC,UAAU;QAAAC,QAAA,eACrB7F,OAAA;UAAK4F,SAAS,EAAC,oBAAoB;UAAAC,QAAA,gBAC/B7F,OAAA;YAAI0D,EAAE,EAAC,UAAU;YAACkC,SAAS,EAAC,eAAe;YAAAC,QAAA,EACtC9E,QAAQ,CAAC0F,GAAG,CAAC,CAACI,GAAG,EAAEC,KAAK,kBACrB9G,OAAA;cAAgB4F,SAAS,EAAE,WAAWiB,GAAG,CAACxC,QAAQ,KAAKlE,MAAM,GAAG,MAAM,GAAG,UAAU,EAAG;cAAA0F,QAAA,gBAClF7F,OAAA;gBAAA6F,QAAA,EAAOgB,GAAG,CAACzB;cAAO;gBAAAU,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAO,CAAC,eAC1BjG,OAAA;gBAAA6F,QAAA,EAAIgB,GAAG,CAACxB;cAAS;gBAAAS,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI,CAAC;YAAA,GAFjBa,KAAK;cAAAhB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAGV,CACP;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC,eACLjG,OAAA;YAAM0D,EAAE,EAAC,aAAa;YAACwC,QAAQ,EAAEnB,WAAY;YAAAc,QAAA,eACzC7F,OAAA;cAAK4F,SAAS,EAAC,sBAAsB;cAAAC,QAAA,gBACjC7F,OAAA;gBAAOoG,IAAI,EAAC,MAAM;gBAAC1C,EAAE,EAAC,SAAS;gBAACqD,WAAW,EAAC;cAAmB;gBAAAjB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAE,CAAC,eAClEjG,OAAA;gBAAQoG,IAAI,EAAC,QAAQ;gBAAAP,QAAA,EAAC;cAAI;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAQ,CAAC;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAClC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACJ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAAC/F,EAAA,CA7PID,GAAG;AAAA+G,EAAA,GAAH/G,GAAG;AA+PT,eAAeA,GAAG;AAAC,IAAA+G,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}